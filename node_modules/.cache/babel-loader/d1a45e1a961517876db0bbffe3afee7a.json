{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar json_codec_1 = require(\"./codecs/json-codec\");\n\nvar text_codec_1 = require(\"./codecs/text-codec\");\n\nvar octetstream_codec_1 = require(\"./codecs/octetstream-codec\");\n\nvar ContentSerdes = function () {\n  function ContentSerdes() {\n    this.codecs = new Map();\n    this.offered = new Set();\n  }\n\n  ContentSerdes.get = function () {\n    if (!this.instance) {\n      this.instance = new ContentSerdes();\n      this.instance.addCodec(new json_codec_1.default(), true);\n      this.instance.addCodec(new json_codec_1.default(\"application/senml+json\"));\n      this.instance.addCodec(new text_codec_1.default());\n      this.instance.addCodec(new octetstream_codec_1.default());\n    }\n\n    return this.instance;\n  };\n\n  ContentSerdes.getMediaType = function (contentType) {\n    var parts = contentType.split(\";\");\n    return parts[0].trim();\n  };\n\n  ContentSerdes.getMediaTypeParameters = function (contentType) {\n    var parts = contentType.split(\";\").slice(1);\n    var params = {};\n    parts.forEach(function (p) {\n      var eq = p.indexOf(\"=\");\n\n      if (eq >= 0) {\n        params[p.substr(0, eq).trim()] = p.substr(eq + 1).trim();\n      } else {\n        params[p.trim()] = null;\n      }\n    });\n    return params;\n  };\n\n  ContentSerdes.prototype.addCodec = function (codec, offered) {\n    if (offered === void 0) {\n      offered = false;\n    }\n\n    ContentSerdes.get().codecs.set(codec.getMediaType(), codec);\n    if (offered) ContentSerdes.get().offered.add(codec.getMediaType());\n  };\n\n  ContentSerdes.prototype.getSupportedMediaTypes = function () {\n    return Array.from(ContentSerdes.get().codecs.keys());\n  };\n\n  ContentSerdes.prototype.getOfferedMediaTypes = function () {\n    return Array.from(ContentSerdes.get().offered);\n  };\n\n  ContentSerdes.prototype.contentToValue = function (content, schema) {\n    if (content.type === undefined) {\n      if (content.body.byteLength > 0) {\n        content.type = ContentSerdes.DEFAULT;\n      } else {\n        return;\n      }\n    }\n\n    var mt = ContentSerdes.getMediaType(content.type);\n    var par = ContentSerdes.getMediaTypeParameters(content.type);\n\n    if (this.codecs.has(mt)) {\n      console.debug(\"ContentSerdes deserializing from \" + content.type);\n      var codec = this.codecs.get(mt);\n      var res = codec.bytesToValue(content.body, schema, par);\n      return res;\n    } else {\n      console.warn(\"ContentSerdes passthrough due to unsupported media type '\" + mt + \"'\");\n      return content.body.toString();\n    }\n  };\n\n  ContentSerdes.prototype.valueToContent = function (value, schema, contentType) {\n    if (contentType === void 0) {\n      contentType = ContentSerdes.DEFAULT;\n    }\n\n    if (value === undefined) console.warn(\"ContentSerdes valueToContent got no value\");\n    var bytes = null;\n    var mt = ContentSerdes.getMediaType(contentType);\n    var par = ContentSerdes.getMediaTypeParameters(contentType);\n\n    if (this.codecs.has(mt)) {\n      console.debug(\"ContentSerdes serializing to \" + contentType);\n      var codec = this.codecs.get(mt);\n      bytes = codec.valueToBytes(value, schema, par);\n    } else {\n      console.warn(\"ContentSerdes passthrough due to unsupported serialization format '\" + contentType + \"'\");\n      bytes = Buffer.from(value);\n    }\n\n    return {\n      type: contentType,\n      body: bytes\n    };\n  };\n\n  ContentSerdes.DEFAULT = \"application/json\";\n  ContentSerdes.TD = \"application/td+json\";\n  ContentSerdes.JSON_LD = \"application/ld+json\";\n  return ContentSerdes;\n}();\n\nexports.ContentSerdes = ContentSerdes;\nexports.default = ContentSerdes.get();","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar url = require(\"url\");\n\nvar os = require(\"os\");\n\nvar Helpers = function () {\n  function Helpers() {}\n\n  Helpers.extractScheme = function (uri) {\n    var parsed = url.parse(uri);\n\n    if (parsed.protocol === null) {\n      throw new Error(\"Protocol in url \\\"\" + uri + \"\\\" must be valid\");\n    }\n\n    var scheme = parsed.protocol.slice(0, -1);\n    console.debug(\"Helpers found scheme '\" + scheme + \"'\");\n    return scheme;\n  };\n\n  Helpers.setStaticAddress = function (address) {\n    Helpers.staticAddress = address;\n  };\n\n  Helpers.getAddresses = function () {\n    var addresses = [];\n\n    if (Helpers.staticAddress !== undefined) {\n      addresses.push(Helpers.staticAddress);\n      console.debug(\"AddressHelper uses static \" + addresses);\n      return addresses;\n    } else {\n      var interfaces = os.networkInterfaces();\n\n      for (var iface in interfaces) {\n        interfaces[iface].forEach(function (entry) {\n          console.debug(\"AddressHelper found \" + entry.address);\n\n          if (entry.internal === false) {\n            if (entry.family === \"IPv4\") {\n              addresses.push(entry.address);\n            } else if (entry.scopeid === 0) {\n              addresses.push(Helpers.toUriLiteral(entry.address));\n            }\n          }\n        });\n      }\n\n      if (addresses.length === 0) {\n        addresses.push('localhost');\n      }\n\n      console.debug(\"AddressHelper identified \" + addresses);\n      return addresses;\n    }\n  };\n\n  Helpers.toUriLiteral = function (address) {\n    if (!address) {\n      console.error(\"AddressHelper received invalid address '\" + address + \"'\");\n      return \"{invalid address}\";\n    }\n\n    if (address.indexOf(':') !== -1) {\n      address = \"[\" + address + \"]\";\n    }\n\n    return address;\n  };\n\n  Helpers.generateUniqueName = function (name) {\n    var suffix = name.match(/.+_([0-9]+)$/);\n\n    if (suffix !== null) {\n      return name.slice(0, -suffix[1].length) + (1 + parseInt(suffix[1]));\n    } else {\n      return name + \"_2\";\n    }\n  };\n\n  Helpers.extend = function (first, second) {\n    var result = {};\n\n    for (var id in first) {\n      result[id] = first[id];\n    }\n\n    for (var id in second) {\n      if (!result.hasOwnProperty(id)) {\n        result[id] = second[id];\n      }\n    }\n\n    return result;\n  };\n\n  Helpers.staticAddress = undefined;\n  return Helpers;\n}();\n\nexports.default = Helpers;","map":null,"metadata":{},"sourceType":"script"}
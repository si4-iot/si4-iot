{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Subject_1 = require(\"rxjs/Subject\");\n\nvar TD = require(\"@node-wot/td-tools\");\n\nvar helpers_1 = require(\"./helpers\");\n\nvar ExposedThing = function (_super) {\n  __extends(ExposedThing, _super);\n\n  function ExposedThing(servient) {\n    var _this = _super.call(this) || this;\n\n    _this.getServient = function () {\n      return servient;\n    };\n\n    _this.getSubjectTD = new (function () {\n      function class_1() {\n        var _this = this;\n\n        this.subjectTDChange = new Subject_1.Subject();\n\n        this.getSubject = function () {\n          return _this.subjectTDChange;\n        };\n      }\n\n      return class_1;\n    }())().getSubject;\n    return _this;\n  }\n\n  ExposedThing.prototype.extendInteractions = function () {\n    for (var propertyName in this.properties) {\n      var newProp = helpers_1.default.extend(this.properties[propertyName], new ExposedThingProperty(propertyName, this));\n      this.properties[propertyName] = newProp;\n    }\n\n    for (var actionName in this.actions) {\n      var newAction = helpers_1.default.extend(this.actions[actionName], new ExposedThingAction(actionName, this));\n      this.actions[actionName] = newAction;\n    }\n\n    for (var eventName in this.events) {\n      var newEvent = helpers_1.default.extend(this.events[eventName], new ExposedThingEvent(eventName, this));\n      this.events[eventName] = newEvent;\n    }\n  };\n\n  ExposedThing.prototype.set = function (name, value) {\n    console.log(\"ExposedThing '\" + this.title + \"' setting field '\" + name + \"' to '\" + value + \"'\");\n    this[name] = value;\n  };\n\n  ExposedThing.prototype.getThingDescription = function () {\n    return TD.serializeTD(this);\n  };\n\n  ExposedThing.prototype.expose = function () {\n    var _this = this;\n\n    console.log(\"ExposedThing '\" + this.title + \"' exposing all Interactions and TD\");\n    return new Promise(function (resolve, reject) {\n      _this.getServient().expose(_this).then(function () {\n        _this.getSubjectTD().next(_this.getThingDescription());\n\n        resolve();\n      }).catch(function (err) {\n        return reject(err);\n      });\n    });\n  };\n\n  ExposedThing.prototype.destroy = function () {\n    return new Promise(function (resolve, reject) {\n      resolve();\n    });\n  };\n\n  ExposedThing.prototype.addProperty = function (name, property, init) {\n    console.log(\"ExposedThing '\" + this.title + \"' adding Property '\" + name + \"'\");\n    var newProp = helpers_1.default.extend(property, new ExposedThingProperty(name, this));\n    this.properties[name] = newProp;\n\n    if (init !== undefined) {\n      newProp.write(init);\n    }\n\n    return this;\n  };\n\n  ExposedThing.prototype.addAction = function (name, action, handler) {\n    if (!handler) {\n      throw new Error(\"addAction() requires handler\");\n    }\n\n    console.log(\"ExposedThing '\" + this.title + \"' adding Action '\" + name + \"'\");\n    var newAction = helpers_1.default.extend(action, new ExposedThingAction(name, this));\n    newAction.getState().handler = handler.bind(newAction.getState().scope);\n    this.actions[name] = newAction;\n    return this;\n  };\n\n  ExposedThing.prototype.addEvent = function (name, event) {\n    var newEvent = helpers_1.default.extend(event, new ExposedThingEvent(name, this));\n    this.events[name] = newEvent;\n    return this;\n  };\n\n  ExposedThing.prototype.removeProperty = function (propertyName) {\n    if (this.properties[propertyName]) {\n      delete this.properties[propertyName];\n    } else {\n      throw new Error(\"ExposedThing '\" + this.title + \"' has no Property '\" + propertyName + \"'\");\n    }\n\n    return this;\n  };\n\n  ExposedThing.prototype.removeAction = function (actionName) {\n    if (this.actions[actionName]) {\n      delete this.actions[actionName];\n    } else {\n      throw new Error(\"ExposedThing '\" + this.title + \"' has no Action '\" + actionName + \"'\");\n    }\n\n    return this;\n  };\n\n  ExposedThing.prototype.removeEvent = function (eventName) {\n    if (this.events[eventName]) {\n      this.events[eventName].getState().subject.complete();\n      delete this.events[eventName];\n    } else {\n      throw new Error(\"ExposedThing '\" + this.title + \"' has no Event '\" + eventName + \"'\");\n    }\n\n    return this;\n  };\n\n  ExposedThing.prototype.setPropertyReadHandler = function (propertyName, handler) {\n    console.log(\"ExposedThing '\" + this.title + \"' setting read handler for '\" + propertyName + \"'\");\n\n    if (this.properties[propertyName]) {\n      this.properties[propertyName].getState().readHandler = handler.bind(this.properties[propertyName].getState().scope);\n    } else {\n      throw new Error(\"ExposedThing '\" + this.title + \"' has no Property '\" + propertyName + \"'\");\n    }\n\n    return this;\n  };\n\n  ExposedThing.prototype.setPropertyWriteHandler = function (propertyName, handler) {\n    console.log(\"ExposedThing '\" + this.title + \"' setting write handler for '\" + propertyName + \"'\");\n\n    if (this.properties[propertyName]) {\n      this.properties[propertyName].getState().writeHandler = handler.bind(this.properties[propertyName].getState().scope);\n\n      if (this.properties[propertyName].readOnly) {\n        console.warn(\"ExposedThing '\" + this.title + \"' automatically setting Property '\" + propertyName + \"' readOnly to false\");\n        this.properties[propertyName].readOnly = false;\n      }\n    } else {\n      throw new Error(\"ExposedThing '\" + this.title + \"' has no Property '\" + propertyName + \"'\");\n    }\n\n    return this;\n  };\n\n  ExposedThing.prototype.setActionHandler = function (actionName, handler) {\n    console.log(\"ExposedThing '\" + this.title + \"' setting action Handler for '\" + actionName + \"'\");\n\n    if (this.actions[actionName]) {\n      this.actions[actionName].getState().handler = handler.bind(this.actions[actionName].getState().scope);\n    } else {\n      throw new Error(\"ExposedThing '\" + this.title + \"' has no Action '\" + actionName + \"'\");\n    }\n\n    return this;\n  };\n\n  return ExposedThing;\n}(TD.Thing);\n\nexports.default = ExposedThing;\n\nvar ExposedThingProperty = function (_super) {\n  __extends(ExposedThingProperty, _super);\n\n  function ExposedThingProperty(name, thing) {\n    var _this = _super.call(this) || this;\n\n    _this.getName = function () {\n      return name;\n    };\n\n    _this.getThing = function () {\n      return thing;\n    };\n\n    _this.getState = new (function () {\n      function class_2() {\n        var _this = this;\n\n        this.state = new PropertyState();\n\n        this.getInternalState = function () {\n          return _this.state;\n        };\n      }\n\n      return class_2;\n    }())().getInternalState;\n    _this.readOnly = false;\n    _this.writeOnly = false;\n    _this.observable = false;\n    return _this;\n  }\n\n  ExposedThingProperty.prototype.read = function (options) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      if (_this.getState().readHandler != null) {\n        console.log(\"ExposedThing '\" + _this.getThing().title + \"' calls registered readHandler for Property '\" + _this.getName() + \"'\");\n\n        _this.getState().readHandler(options).then(function (customValue) {\n          _this.getState().value = customValue;\n          resolve(customValue);\n        });\n      } else {\n        console.log(\"ExposedThing '\" + _this.getThing().title + \"' gets internal value '\" + _this.getState().value + \"' for Property '\" + _this.getName() + \"'\");\n        resolve(_this.getState().value);\n      }\n    });\n  };\n\n  ExposedThingProperty.prototype.write = function (value, options) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      if (_this.getState().writeHandler != null) {\n        var promiseOrValueOrNil = _this.getState().writeHandler(value, options);\n\n        if (promiseOrValueOrNil !== undefined) {\n          if (typeof promiseOrValueOrNil.then === \"function\") {\n            promiseOrValueOrNil.then(function (customValue) {\n              console.log(\"ExposedThing '\" + _this.getThing().title + \"' write handler for Property '\" + _this.getName() + \"' sets custom value '\" + customValue + \"'\");\n\n              if (_this.getState().value !== customValue) {\n                _this.getState().subject.next(customValue);\n              }\n\n              _this.getState().value = customValue;\n              resolve();\n            }).catch(function (customError) {\n              console.warn(\"ExposedThing '\" + _this.getThing().title + \"' write handler for Property '\" + _this.getName() + \"' rejected the write with error '\" + customError + \"'\");\n              reject(customError);\n            });\n          } else {\n            console.warn(\"ExposedThing '\" + _this.getThing().title + \"' write handler for Property '\" + _this.getName() + \"' does not return promise\");\n\n            if (_this.getState().value !== promiseOrValueOrNil) {\n              _this.getState().subject.next(promiseOrValueOrNil);\n            }\n\n            _this.getState().value = promiseOrValueOrNil;\n            resolve();\n          }\n        } else {\n          console.warn(\"ExposedThing '\" + _this.getThing().title + \"' write handler for Property '\" + _this.getName() + \"' does not return custom value, using direct value '\" + value + \"'\");\n\n          if (_this.getState().value !== value) {\n            _this.getState().subject.next(value);\n          }\n\n          _this.getState().value = value;\n          resolve();\n        }\n      } else {\n        console.log(\"ExposedThing '\" + _this.getThing().title + \"' directly sets Property '\" + _this.getName() + \"' to value '\" + value + \"'\");\n\n        if (_this.getState().value !== value) {\n          _this.getState().subject.next(value);\n        }\n\n        _this.getState().value = value;\n        resolve();\n      }\n    });\n  };\n\n  ExposedThingProperty.prototype.subscribe = function (next, error, complete) {\n    return this.getState().subject.asObservable().subscribe(next, error, complete);\n  };\n\n  return ExposedThingProperty;\n}(TD.ThingProperty);\n\nvar ExposedThingAction = function (_super) {\n  __extends(ExposedThingAction, _super);\n\n  function ExposedThingAction(name, thing) {\n    var _this = _super.call(this) || this;\n\n    _this.getName = function () {\n      return name;\n    };\n\n    _this.getThing = function () {\n      return thing;\n    };\n\n    _this.getState = new (function () {\n      function class_3() {\n        var _this = this;\n\n        this.state = new ActionState();\n\n        this.getInternalState = function () {\n          return _this.state;\n        };\n      }\n\n      return class_3;\n    }())().getInternalState;\n    return _this;\n  }\n\n  ExposedThingAction.prototype.invoke = function (parameter, options) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      console.debug(\"ExposedThing '\" + _this.getThing().title + \"' has Action state of '\" + _this.getName() + \"':\", _this.getState());\n\n      if (_this.getState().handler != null) {\n        console.log(\"ExposedThing '\" + _this.getThing().title + \"' calls registered handler for Action '\" + _this.getName() + \"'\");\n        resolve(_this.getState().handler(parameter, options));\n      } else {\n        reject(new Error(\"ExposedThing '\" + _this.getThing().title + \"' has no handler for Action '\" + _this.getName() + \"'\"));\n      }\n    });\n  };\n\n  return ExposedThingAction;\n}(TD.ThingAction);\n\nvar ExposedThingEvent = function (_super) {\n  __extends(ExposedThingEvent, _super);\n\n  function ExposedThingEvent(name, thing) {\n    var _this = _super.call(this) || this;\n\n    _this.getName = function () {\n      return name;\n    };\n\n    _this.getThing = function () {\n      return thing;\n    };\n\n    _this.getState = new (function () {\n      function class_4() {\n        var _this = this;\n\n        this.state = new EventState();\n\n        this.getInternalState = function () {\n          return _this.state;\n        };\n      }\n\n      return class_4;\n    }())().getInternalState;\n    return _this;\n  }\n\n  ExposedThingEvent.prototype.subscribe = function (next, error, complete) {\n    return this.getState().subject.asObservable().subscribe(next, error, complete);\n  };\n\n  ExposedThingEvent.prototype.emit = function (data) {\n    this.getState().subject.next(data);\n  };\n\n  return ExposedThingEvent;\n}(TD.ThingEvent);\n\nvar PropertyState = function () {\n  function PropertyState(value) {\n    if (value === void 0) {\n      value = null;\n    }\n\n    this.value = value;\n    this.subject = new Subject_1.Subject();\n    this.scope = {};\n    this.writeHandler = null;\n    this.readHandler = null;\n  }\n\n  return PropertyState;\n}();\n\nvar ActionState = function () {\n  function ActionState() {\n    this.scope = {};\n    this.handler = null;\n  }\n\n  return ActionState;\n}();\n\nvar EventState = function () {\n  function EventState() {\n    this.subject = new Subject_1.Subject();\n  }\n\n  return EventState;\n}();","map":null,"metadata":{},"sourceType":"script"}
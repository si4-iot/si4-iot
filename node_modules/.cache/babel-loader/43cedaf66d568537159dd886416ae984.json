{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar http = require(\"http\");\n\nvar https = require(\"https\");\n\nvar url = require(\"url\");\n\nvar Subscription_1 = require(\"rxjs/Subscription\");\n\nvar HttpClient = function () {\n  function HttpClient(config, secure) {\n    if (config === void 0) {\n      config = null;\n    }\n\n    if (secure === void 0) {\n      secure = false;\n    }\n\n    this.proxyOptions = null;\n    this.authorization = null;\n    this.authorizationHeader = \"Authorization\";\n    this.allowSelfSigned = false;\n\n    if (config !== null && config.proxy && config.proxy.href) {\n      this.proxyOptions = this.uriToOptions(config.proxy.href, true);\n\n      if (config.proxy.scheme === \"basic\") {\n        if (!config.proxy.hasOwnProperty(\"username\") || !config.proxy.hasOwnProperty(\"password\")) console.warn(\"HttpClient client configured for basic proxy auth, but no username/password given\");\n        this.proxyOptions.headers = {};\n        this.proxyOptions.headers['Proxy-Authorization'] = \"Basic \" + Buffer.from(config.proxy.username + \":\" + config.proxy.password).toString('base64');\n      } else if (config.proxy.scheme === \"bearer\") {\n        if (!config.proxy.hasOwnProperty(\"token\")) console.warn(\"HttpClient client configured for bearer proxy auth, but no token given\");\n        this.proxyOptions.headers = {};\n        this.proxyOptions.headers['Proxy-Authorization'] = \"Bearer \" + config.proxy.token;\n      }\n\n      if (this.proxyOptions.protocol === \"https\") {\n        secure = true;\n      }\n\n      console.info(\"HttpClient using \" + (secure ? \"secure \" : \"\") + \"proxy \" + this.proxyOptions.hostname + \":\" + this.proxyOptions.port);\n    }\n\n    if (config !== null && config.allowSelfSigned !== undefined) {\n      this.allowSelfSigned = config.allowSelfSigned;\n      console.warn(\"HttpClient allowing self-signed/untrusted certificates -- USE FOR TESTING ONLY\");\n    }\n\n    this.agent = secure ? new https.Agent() : new http.Agent();\n    this.provider = secure ? https : http;\n  }\n\n  HttpClient.prototype.getContentType = function (res) {\n    var header = res.headers['content-type'];\n\n    if (Array.isArray(header)) {\n      return header.length > 0 ? header[0] : \"\";\n    } else {\n      return header;\n    }\n  };\n\n  HttpClient.prototype.toString = function () {\n    return \"[HttpClient]\";\n  };\n\n  HttpClient.prototype.readResource = function (form) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var req = _this.generateRequest(form, \"GET\");\n\n      var info = req;\n      console.log(\"HttpClient sending \" + info.method + \" to \" + info.path);\n      req.on(\"response\", function (res) {\n        console.log(\"HttpClient received \" + res.statusCode + \" from \" + info.path);\n\n        var contentType = _this.getContentType(res);\n\n        var body = [];\n        res.on('data', function (data) {\n          body.push(data);\n        });\n        res.on('end', function () {\n          _this.checkResponse(res.statusCode, contentType, Buffer.concat(body), resolve, reject);\n        });\n      });\n      req.on(\"error\", function (err) {\n        return reject(err);\n      });\n      req.end();\n    });\n  };\n\n  HttpClient.prototype.writeResource = function (form, content) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var req = _this.generateRequest(form, \"PUT\");\n\n      var info = req;\n      req.setHeader(\"Content-Type\", content.type);\n      req.setHeader(\"Content-Length\", content.body.byteLength);\n      console.log(\"HttpClient sending \" + info.method + \" with '\" + req.getHeader(\"Content-Type\") + \"' to \" + info.path);\n      req.on(\"response\", function (res) {\n        console.log(\"HttpClient received \" + res.statusCode + \" from \" + info.path);\n\n        var contentType = _this.getContentType(res);\n\n        var body = [];\n        res.on('data', function (data) {\n          body.push(data);\n        });\n        res.on('end', function () {\n          _this.checkResponse(res.statusCode, contentType, Buffer.concat(body), resolve, reject);\n        });\n      });\n      req.on('error', function (err) {\n        return reject(err);\n      });\n      req.write(content.body);\n      req.end();\n    });\n  };\n\n  HttpClient.prototype.invokeResource = function (form, content) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var req = _this.generateRequest(form, \"POST\");\n\n      var info = req;\n\n      if (content) {\n        req.setHeader(\"Content-Type\", content.type);\n        req.setHeader(\"Content-Length\", content.body.byteLength);\n      }\n\n      console.log(\"HttpClient sending \" + info.method + \" \" + (content ? \"with '\" + req.getHeader(\"Content-Type\") + \"' \" : \" \") + \"to \" + info.path);\n      req.on(\"response\", function (res) {\n        console.log(\"HttpClient received \" + res.statusCode + \" from \" + form.href);\n\n        var contentType = _this.getContentType(res);\n\n        console.debug(\"HttpClient received Content-Type: \" + contentType);\n        var body = [];\n        res.on('data', function (data) {\n          body.push(data);\n        });\n        res.on('end', function () {\n          _this.checkResponse(res.statusCode, contentType, Buffer.concat(body), resolve, reject);\n        });\n      });\n      req.on(\"error\", function (err) {\n        return reject(err);\n      });\n\n      if (content) {\n        req.write(content.body);\n      }\n\n      req.end();\n    });\n  };\n\n  HttpClient.prototype.unlinkResource = function (form) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var req = _this.generateRequest(form, \"DELETE\");\n\n      var info = req;\n      console.log(\"HttpClient sending \" + info.method + \" to \" + form.href);\n      req.on(\"response\", function (res) {\n        console.log(\"HttpClient received \" + res.statusCode + \" from \" + form.href);\n\n        var contentType = _this.getContentType(res);\n\n        var body = [];\n        res.on('data', function (data) {\n          body.push(data);\n        });\n        res.on('end', function () {\n          _this.checkResponse(res.statusCode, contentType, Buffer.concat(body), resolve, reject);\n        });\n      });\n      req.on('error', function (err) {\n        return reject(err);\n      });\n      req.end();\n    });\n  };\n\n  HttpClient.prototype.subscribeResource = function (form, next, error, complete) {\n    var _this = this;\n\n    var active = true;\n\n    var polling = function () {\n      var req = _this.generateRequest(form, \"GET\");\n\n      var info = req;\n      req.setTimeout(60 * 60 * 1000);\n      console.log(\"HttpClient sending \" + info.method + \" to \" + form.href);\n      req.on(\"response\", function (res) {\n        console.log(\"HttpClient received \" + res.statusCode + \" from \" + form.href);\n\n        var contentType = _this.getContentType(res);\n\n        var body = [];\n        res.on(\"data\", function (data) {\n          body.push(data);\n        });\n        res.on(\"end\", function () {\n          if (active) {\n            _this.checkResponse(res.statusCode, contentType, Buffer.concat(body), next, error);\n\n            polling();\n          }\n        });\n      });\n      req.on(\"error\", function (err) {\n        if (error) error(err);\n        if (complete) complete();\n      });\n      req.flushHeaders();\n      req.end();\n    };\n\n    polling();\n    return new Subscription_1.Subscription(function () {\n      active = false;\n    });\n  };\n\n  HttpClient.prototype.start = function () {\n    return true;\n  };\n\n  HttpClient.prototype.stop = function () {\n    if (this.agent && this.agent.destroy) this.agent.destroy();\n    return true;\n  };\n\n  HttpClient.prototype.setSecurity = function (metadata, credentials) {\n    if (metadata === undefined || !Array.isArray(metadata) || metadata.length == 0) {\n      console.warn(\"HttpClient without security\");\n      return false;\n    }\n\n    var security = metadata[0];\n\n    if (security.scheme === \"basic\") {\n      if (credentials === undefined || credentials.username === undefined || credentials.password === undefined) {\n        throw new Error(\"No Basic credentionals for Thing\");\n      }\n\n      this.authorization = \"Basic \" + Buffer.from(credentials.username + \":\" + credentials.password).toString('base64');\n    } else if (security.scheme === \"bearer\") {\n      if (credentials === undefined || credentials.token === undefined) {\n        throw new Error(\"No Bearer credentionals for Thing\");\n      }\n\n      this.authorization = \"Bearer \" + credentials.token;\n    } else if (security.scheme === \"apikey\") {\n      if (credentials === undefined || credentials.apikey === undefined) {\n        throw new Error(\"No API key credentionals for Thing\");\n      }\n\n      this.authorization = credentials.apikey;\n\n      if (security.in === \"header\" && security.name !== undefined) {\n        this.authorizationHeader = security.name;\n      }\n    } else if (security.scheme === \"nosec\") {} else {\n      console.error(\"HttpClient cannot set security scheme '\" + security.scheme + \"'\");\n      console.dir(metadata);\n      return false;\n    }\n\n    if (security.proxy) {\n      if (this.proxyOptions !== null) {\n        console.info(\"HttpClient overriding client-side proxy with security proxy '\" + security.proxy);\n      }\n\n      this.proxyOptions = this.uriToOptions(security.proxy, true);\n\n      if (security.scheme == \"basic\") {\n        if (credentials === undefined || credentials.username === undefined || credentials.password === undefined) {\n          throw new Error(\"No Basic credentionals for Thing\");\n        }\n\n        this.proxyOptions.headers = {};\n        this.proxyOptions.headers['Proxy-Authorization'] = \"Basic \" + Buffer.from(credentials.username + \":\" + credentials.password).toString('base64');\n      } else if (security.scheme == \"bearer\") {\n        if (credentials === undefined || credentials.token === undefined) {\n          throw new Error(\"No Bearer credentionals for Thing\");\n        }\n\n        this.proxyOptions.headers = {};\n        this.proxyOptions.headers['Proxy-Authorization'] = \"Bearer \" + credentials.token;\n      }\n    }\n\n    console.log(\"HttpClient using security scheme '\" + security.scheme + \"'\");\n    return true;\n  };\n\n  HttpClient.prototype.uriToOptions = function (uri, ignoreProxy) {\n    if (ignoreProxy === void 0) {\n      ignoreProxy = false;\n    }\n\n    var requestUri = url.parse(uri);\n    var options = {};\n    options.agent = this.agent;\n\n    if (this.proxyOptions != null && ignoreProxy === false) {\n      options.hostname = this.proxyOptions.hostname;\n      options.port = this.proxyOptions.port;\n      options.path = uri;\n      options.headers = {};\n\n      for (var hf in this.proxyOptions.headers) options.headers[hf] = this.proxyOptions.headers[hf];\n\n      options.headers[\"Host\"] = requestUri.hostname;\n    } else {\n      options.hostname = requestUri.hostname;\n\n      if (options.hostname === \"localhost\") {\n        console.warn(\"LOCALHOST FIX\");\n        options.hostname = \"127.0.0.1\";\n      }\n\n      options.port = parseInt(requestUri.port, 10);\n      options.path = requestUri.path;\n      options.headers = {};\n    }\n\n    if (this.authorization !== null) {\n      options.headers[this.authorizationHeader] = this.authorization;\n    }\n\n    if (this.allowSelfSigned === true) {\n      options.rejectUnauthorized = false;\n    }\n\n    return options;\n  };\n\n  HttpClient.prototype.generateRequest = function (form, dflt) {\n    var options = this.uriToOptions(form.href);\n    options.method = dflt;\n\n    if (typeof form[\"htv:methodName\"] === \"string\") {\n      console.log(\"HttpClient got Form 'methodName'\", form[\"htv:methodName\"]);\n\n      switch (form[\"htv:methodName\"]) {\n        case \"GET\":\n          options.method = \"GET\";\n          break;\n\n        case \"POST\":\n          options.method = \"POST\";\n          break;\n\n        case \"PUT\":\n          options.method = \"PUT\";\n          break;\n\n        case \"DELETE\":\n          options.method = \"DELETE\";\n          break;\n\n        case \"PATCH\":\n          options.method = \"PATCH\";\n          break;\n\n        default:\n          console.warn(\"HttpClient got invalid 'methodName', using default\", options.method);\n      }\n    }\n\n    var req = this.provider.request(options);\n    console.debug(\"HttpClient applying form\");\n\n    if (options.method === \"GET\" && typeof form.contentType === \"string\") {\n      console.debug(\"HttpClient got Form 'contentType'\", form.contentType);\n      req.setHeader(\"Accept\", form.contentType);\n    }\n\n    if (Array.isArray(form[\"htv:headers\"])) {\n      console.debug(\"HttpClient got Form 'headers'\", form[\"htv:headers\"]);\n      var headers = form[\"htv:headers\"];\n\n      for (var _i = 0, headers_1 = headers; _i < headers_1.length; _i++) {\n        var option = headers_1[_i];\n        req.setHeader(option[\"htv:fieldName\"], option[\"htv:fieldValue\"]);\n      }\n    } else if (typeof form[\"htv:headers\"] === \"object\") {\n      console.warn(\"HttpClient got Form SINGLE-ENTRY 'headers'\", form[\"htv:headers\"]);\n      var option = form[\"htv:headers\"];\n      req.setHeader(option[\"htv:fieldName\"], option[\"htv:fieldValue\"]);\n    }\n\n    return req;\n  };\n\n  HttpClient.prototype.checkResponse = function (statusCode, contentType, body, resolve, reject) {\n    if (statusCode < 200) {\n      throw new Error(\"HttpClient received \" + statusCode + \" and cannot continue (not implemented, open GitHub Issue)\");\n    } else if (statusCode < 300) {\n      resolve({\n        type: contentType,\n        body: body\n      });\n    } else if (statusCode < 400) {\n      throw new Error(\"HttpClient received \" + statusCode + \" and cannot continue (not implemented, open GitHub Issue)\");\n    } else if (statusCode < 500) {\n      reject(new Error(\"Client error: \" + body.toString()));\n    } else {\n      reject(new Error(\"Server error: \" + body.toString()));\n    }\n  };\n\n  return HttpClient;\n}();\n\nexports.default = HttpClient;","map":null,"metadata":{},"sourceType":"script"}